declare class GzappyClient {
    private token;
    private instanceId;
    private baseURL;
    private api;
    constructor({ token, instanceId }: GzappyClientOptions);
    /**
     * Cria uma nova instância de WhatsApp.
     * @param instance_name - Nome da instância.
     * @returns {Promise<{qr: string}>} - Em caso de sucesso retorna o QR Code para autenticação.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    createInstance(instance_name: string): Promise<{
        qr: string;
    } | {
        error: string;
    }>;
    /**
     * Lista todas as instâncias de WhatsApp.
     * @returns {Promise<{data: InstanceItemList[]}>} - Em caso de sucesso retorna um array com as instâncias.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    listInstances(): Promise<{
        data: {
            instance_name: string;
            instance_status: string;
            instance_id: string;
        }[];
    } | {
        error: string;
    }>;
    /**
     * Restaura uma instância de WhatsApp.
     * @param instance_id - ID da instância a ser restaurada.
     * @returns {Promise<{qr: string}>} - Em caso de sucesso retorna o QR Code para autenticação.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    restoreInstance(instance_id: string): Promise<{
        qr: string;
    } | {
        error: string;
    }>;
    /**
     * Deleta uma instância de WhatsApp. Isso irá desconectar a instância e apagar todos os dados. Não é possível recuperar os dados após a exclusão.
     * @param instance_id - ID da instância a ser deletada.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    deleteInstance(instance_id: string): Promise<{
        msg: string;
    } | {
        error: string;
    }>;
    /**
     * Desconecta uma instância de WhatsApp.
     * @param instance_id - ID da instância a ser desconectada.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    disconnectInstance(instance_id: string): Promise<{
        msg: string;
    } | {
        error: string;
    }>;
    /**
     * Edita uma instância de WhatsApp.
     * @param instance_id - ID da instância a ser desconectada.
     * @param instance_name - Nome da instância.
     * @param webhook_receivement_message_url - Webhook para recebimento de mensagens.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    editInstance(instance_id: string, instance_name: string, webhook_receivement_message_url?: string): Promise<{
        msg: string;
    } | {
        error: string;
    }>;
    /**
     * Envia uma mensagem para um número de telefone a partir de uma instância de WhatsApp.
     * @param messages - Array de mensagens a serem enviadas.
     * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    sendMessage(messages: string[], phones: string[]): Promise<any>;
    /**
     * Envia uma mídia para um número de telefone a partir de uma instância de WhatsApp.
     * @param message - Mensagem a ser enviada.
     * @param mediaUrl - URL da mídia a ser enviada. Pode ser uma imagem, vídeo ou arquivo de áudio.
     * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    sendMedia(message: string, mediaUrl: string, phones: string[]): Promise<any>;
    /**
     * Envia uma mensagem para um grupo a partir de uma instância de WhatsApp.
     * @param messages - Array de mensagens a serem enviadas.
     * @param groups - Array de JIDs de grupo para os quais as mensagens serão enviadas. O JID é o ID do grupo no formato xxx@g.us (que pode ser encontrado no painel gzappy https://app.gzappy.com/)
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    sendGroupMessage(messages: string[], groups: string[]): Promise<any>;
    /**
     * Agenda uma mensagem para ser enviada em uma data e hora específicas a partir de uma instância de WhatsApp.
     * @param messages - Array de mensagens a serem enviadas.
     * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
     * @param scheduleUtcDate - Data e hora em que a mensagem será enviada no formato ISO 8601 (por exemplo, 2021-12-31T23:59:59Z). Se não for fornecido, a mensagem será enviada no próximo minuto.
     * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
     * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
     */
    scheduleMessage(messages: string[], phones: string[], scheduleUtcDate?: string): Promise<any>;
}

export { GzappyClient as default };
