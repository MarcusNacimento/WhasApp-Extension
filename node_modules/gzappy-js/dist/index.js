"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_axios = __toESM(require("axios"));
var GzappyClient = class {
  token;
  instanceId;
  baseURL;
  api;
  constructor({ token, instanceId }) {
    if (!token) {
      throw new Error("Auth token for gzappy-js is required");
    }
    if (!instanceId) {
      throw new Error("instanceId for gzappy-js is required");
    }
    this.token = token;
    this.instanceId = instanceId;
    this.baseURL = "https://api.gzappy.com/v1";
    this.api = import_axios.default.create({
      baseURL: this.baseURL,
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json"
      }
    });
  }
  /**
   * Cria uma nova instância de WhatsApp.
   * @param instance_name - Nome da instância.
   * @returns {Promise<{qr: string}>} - Em caso de sucesso retorna o QR Code para autenticação.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async createInstance(instance_name) {
    try {
      const response = await this.api.post("/instances/add", {
        instance_name
      });
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Lista todas as instâncias de WhatsApp.
   * @returns {Promise<{data: InstanceItemList[]}>} - Em caso de sucesso retorna um array com as instâncias.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async listInstances() {
    try {
      const response = await this.api.get("/instances/list");
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Restaura uma instância de WhatsApp.
   * @param instance_id - ID da instância a ser restaurada.
   * @returns {Promise<{qr: string}>} - Em caso de sucesso retorna o QR Code para autenticação.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async restoreInstance(instance_id) {
    try {
      const response = await this.api.patch("/instances/restore", {
        instance_id
      });
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Deleta uma instância de WhatsApp. Isso irá desconectar a instância e apagar todos os dados. Não é possível recuperar os dados após a exclusão.
   * @param instance_id - ID da instância a ser deletada.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async deleteInstance(instance_id) {
    try {
      const response = await this.api.delete("/instances/delete", {
        data: {
          instance_id
        }
      });
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Desconecta uma instância de WhatsApp.
   * @param instance_id - ID da instância a ser desconectada.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async disconnectInstance(instance_id) {
    try {
      const response = await this.api.patch("/instances/disconnect", {
        instance_id
      });
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Edita uma instância de WhatsApp.
   * @param instance_id - ID da instância a ser desconectada.
   * @param instance_name - Nome da instância.
   * @param webhook_receivement_message_url - Webhook para recebimento de mensagens.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async editInstance(instance_id, instance_name, webhook_receivement_message_url) {
    try {
      const response = await this.api.patch("/instances/update", {
        instance_name,
        instance_id,
        webhook_receivement_message_url
      });
      return response.data;
    } catch (error) {
      return {
        error: error.response.data.msg
      };
    }
  }
  /**
   * Envia uma mensagem para um número de telefone a partir de uma instância de WhatsApp.
   * @param messages - Array de mensagens a serem enviadas.
   * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async sendMessage(messages, phones) {
    if (messages.some((message) => message === "")) {
      return { error: "Message cannot be empty" };
    }
    if (phones.some((phone) => phone === "")) {
      return { error: "Phone number cannot be empty" };
    }
    if (messages.some((message) => message.length > 5e3)) {
      return { error: "Message cannot be more than 5000 characters" };
    }
    if (messages.length > 3) {
      return { error: "You can only send 3 messages at a time" };
    }
    if (phones.length > 5) {
      return { error: "You can only send to 5 numbers at a time" };
    }
    if (phones.some(
      (phone) => phone.replace(/\D/g, "").length < 12 || phone.replace(/\D/g, "").length > 15
    )) {
      return { error: "Phone number is invalid" };
    }
    try {
      const response = await this.api.post("/message/send-message", {
        instance_id: this.instanceId,
        message: messages,
        phone: phones
      });
      return response.data;
    } catch (error) {
      return error.data;
    }
  }
  /**
   * Envia uma mídia para um número de telefone a partir de uma instância de WhatsApp.
   * @param message - Mensagem a ser enviada.
   * @param mediaUrl - URL da mídia a ser enviada. Pode ser uma imagem, vídeo ou arquivo de áudio.
   * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async sendMedia(message, mediaUrl, phones) {
    if (message === "") {
      return { error: "Message cannot be empty" };
    }
    if (phones.some((phone) => phone === "")) {
      return { error: "Phone number cannot be empty" };
    }
    try {
      const response = await this.api.post("/message/send-media", {
        instance_id: this.instanceId,
        message,
        mediaUrl,
        phone: phones
      });
      return response.data;
    } catch (error) {
      return error.data;
    }
  }
  /**
   * Envia uma mensagem para um grupo a partir de uma instância de WhatsApp.
   * @param messages - Array de mensagens a serem enviadas.
   * @param groups - Array de JIDs de grupo para os quais as mensagens serão enviadas. O JID é o ID do grupo no formato xxx@g.us (que pode ser encontrado no painel gzappy https://app.gzappy.com/)
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async sendGroupMessage(messages, groups) {
    if (messages.some((message) => message === "")) {
      return { error: "Message cannot be empty" };
    }
    if (groups.some((group) => group === "")) {
      return { error: "Group number cannot be empty" };
    }
    try {
      const response = await this.api.post("/message/send-group-message", {
        instance_id: this.instanceId,
        message: messages,
        group: groups
      });
      return response.data;
    } catch (error) {
      return error.data;
    }
  }
  /**
   * Agenda uma mensagem para ser enviada em uma data e hora específicas a partir de uma instância de WhatsApp.
   * @param messages - Array de mensagens a serem enviadas.
   * @param phones - Array de números de telefone para os quais as mensagens serão enviadas.
   * @param scheduleUtcDate - Data e hora em que a mensagem será enviada no formato ISO 8601 (por exemplo, 2021-12-31T23:59:59Z). Se não for fornecido, a mensagem será enviada no próximo minuto.
   * @returns {Promise<{msg: string}>} - Em caso de sucesso retorna a mensagem de sucesso.
   * @returns {Promise<{error: string}>} - Em caso de erro retorna a mensagem de erro.
   */
  async scheduleMessage(messages, phones, scheduleUtcDate) {
    if (messages.some((message) => message === "")) {
      return { error: "Message cannot be empty" };
    }
    if (phones.some((phone) => phone === "")) {
      return { error: "Phone number cannot be empty" };
    }
    try {
      const response = await this.api.post("/message/schedule-message", {
        instance_id: this.instanceId,
        message: messages,
        phone: phones,
        send_at: scheduleUtcDate
      });
      return response.data;
    } catch (error) {
      return error.data;
    }
  }
};
var src_default = GzappyClient;
